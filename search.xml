<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 基础语法</title>
    <url>/Java/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="基础代码格式"><a href="#基础代码格式" class="headerlink" title="基础代码格式"></a>基础代码格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// Main 类 -&gt; 文件名必须与类名相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// main 方法 -&gt; 程序入口</span></span><br><span class="line">        <span class="comment">// 代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 导入 Scanner 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();   <span class="comment">// 读取输入</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        sc.close(); <span class="comment">// 关闭Scanner对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// 自动类型转换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;c 是：&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">byte</span>) a; <span class="comment">// 强制类型转换</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">byte</span>) (a + b); <span class="comment">// 强制类型转换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;c 是：&quot;</span> + c);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;d 是：&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;a = 1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;a = 2&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;a = 0&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (a) &#123; <span class="comment">// JDK 12 新特性</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;a = 1&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;a = 2&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;a = 0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        <span class="type">int</span>[] array2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(array[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(array2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL 外部访问</title>
    <url>/MySQL/%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>添加一个专门用于外部访问的用户，不建议开放 root 的外部访问权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;</span><br><span class="line"># host 必须为 <span class="operator">%</span> ，才能允许所有IP地址均可访问</span><br><span class="line">FLUSH PRIVILEGES; # 应用更改</span><br></pre></td></tr></table></figure>

<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><p>访问 MySQL 的配置文件，如 linux 在<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>找到 <code>bind-address = 127.0.0.1</code></p>
<p>将其前面加上<code>#</code>，注释掉</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># bind-address = <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure>

<p>按下<code>Esc</code>，输入<code>:wq</code>保存并退出</p>
<h3 id="重启-MySQL"><a href="#重启-MySQL" class="headerlink" title="重启 MySQL"></a>重启 MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure>

<h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><p>在其他服务器上连接 MySQL（需要安装 MySQL 服务）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h remote-ip -u user -p</span><br></pre></td></tr></table></figure>

<p><code>remote-ip</code>：远程数据库的 IP 地址</p>
<p><code>user</code>：连接用户名</p>
<p>输入密码，登录</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL 用户管理</title>
    <url>/MySQL/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="切换至-MySQL-库"><a href="#切换至-MySQL-库" class="headerlink" title="切换至 MySQL 库"></a>切换至 MySQL 库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<p>对用户的操作必须在<code>mysql</code>库中</p>
<h3 id="添加用户，设定密码"><a href="#添加用户，设定密码" class="headerlink" title="添加用户，设定密码"></a>添加用户，设定密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;passwd&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>user</code>：用户名</p>
<p><code>host</code>：主机名，如果仅在本地主机访问，应为<code>localhost</code>，允许所有 IP 地址访问，应为<code>%</code></p>
<p><code>passwd</code>：密码</p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> books.book <span class="keyword">to</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>all privileges</code>：权限列表，如<code>all privileges</code>表示所有权限</p>
<p><code>books.book</code>：所具有权限的库和表，所有库和表则为<code>*.*</code></p>
<p><code>&#39;user&#39;@&#39;host&#39;</code>：授予的用户</p>
<h4 id="授予-为给其他用户授权-的权限"><a href="#授予-为给其他用户授权-的权限" class="headerlink" title="授予 为给其他用户授权 的权限"></a>授予 为给其他用户授权 的权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure>

<h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="撤销-授权-权限"><a href="#撤销-授权-权限" class="headerlink" title="撤销 授权 权限"></a>撤销 授权 权限</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> privileges,<span class="keyword">grant</span> option <span class="keyword">from</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="应用更改"><a href="#应用更改" class="headerlink" title="应用更改"></a>应用更改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>Windows 沙盒更改中文</title>
    <url>/Windows/%E6%B2%99%E7%9B%92%E6%9B%B4%E6%94%B9%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<blockquote>
<p>配置文件：<a href="../../resource/Windows/Windows-%E6%B2%99%E7%9B%92%E6%9B%B4%E6%94%B9%E4%B8%AD%E6%96%87/ntuser.dat">点击下载</a></p>
</blockquote>
<blockquote>
<p>原理：更改沙盒默认的注册表值。</p>
</blockquote>
<h3 id="找到沙盒文件目录"><a href="#找到沙盒文件目录" class="headerlink" title="找到沙盒文件目录"></a>找到沙盒文件目录</h3><blockquote>
<p>C:\ProgramData\Microsoft\Windows\Containers\BaseImages\af2d59eb-30fb-414f-9f5a-6aba4eeec179\BaseLayer\Files</p>
<p>这个目录的 uuid 每个人的都不一样。</p>
</blockquote>
<p>目录下面不同版本可能不一样，以前的版本目录下是 BaseLayer.vhdx 虚拟磁盘文件，新版本是普通文件夹，如下图</p>
<img class="cakkl-img" data-src="../../images/Windows/Windows-沙盒更改中文/Windows-沙盒更改中文(1).png" alt="Windows-沙盒更改中文(1).png">

<h3 id="进入用户目录"><a href="#进入用户目录" class="headerlink" title="进入用户目录"></a>进入用户目录</h3><p>先复制并额外备份 ntuser.data 文件（这个文件是个隐藏文件，记得在文件资源管理器里打开查看隐藏文件）。</p>
<img class="cakkl-img" data-src="../../images/Windows/Windows-沙盒更改中文/Windows-沙盒更改中文(2).png" alt="Windows-沙盒更改中文(2).png">

<h3 id="启动沙盒"><a href="#启动沙盒" class="headerlink" title="启动沙盒"></a>启动沙盒</h3><p>（其实也可以不启动，可以直接在宿主机上操作，单操作注册表怕搞崩宿主机，在沙盒里操作稳妥点）</p>
<h3 id="拷贝-ntuser-data-文件到沙盒里"><a href="#拷贝-ntuser-data-文件到沙盒里" class="headerlink" title="拷贝 ntuser.data  文件到沙盒里"></a>拷贝 ntuser.data  文件到沙盒里</h3><h3 id="打开注册表编辑器并加载-ntuser-data-文件"><a href="#打开注册表编辑器并加载-ntuser-data-文件" class="headerlink" title="打开注册表编辑器并加载 ntuser.data  文件"></a>打开注册表编辑器并加载 ntuser.data  文件</h3><p>先选中 HKEY_LOCAL_MACHINE 节点（不选中  Load Hive  选项不可用），然后加载配置文件(Load Hive)，打开  ntuser.data  文件即可。</p>
<img class="cakkl-img" data-src="../../images/Windows/Windows-沙盒更改中文/Windows-沙盒更改中文(3).png" alt="Windows-沙盒更改中文(3).png">

<p>需要命个名，随便写一个（如 sdx）即可，不影响。</p>
<p>删除  <del>sdx\Control Panel\Desktop\PreferredUILanguagesPending</del></p>
<p>新增  sdx\Control Panel\Desktop\PreferredUILanguages，值类型为 Multi-String Value(多字符串值)，值为 zh_CN</p>
<p>修改  sdx\Control Panel\International\User Profile\Languages  的值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zh-Hans-CN</span><br><span class="line">en-US</span><br></pre></td></tr></table></figure>

<p>以下两项地区的不改也不影响显示为中文</p>
<p>修改  sdx\Control Panel\International\Geo\Name  值为 CN</p>
<p>修改  sdx\Control Panel\International\Geo\Nation  值为 45</p>
<h3 id="选中-sdx-节点，在文件菜单中卸载配置文件-Unload-Hive"><a href="#选中-sdx-节点，在文件菜单中卸载配置文件-Unload-Hive" class="headerlink" title="选中 sdx 节点，在文件菜单中卸载配置文件(Unload Hive)"></a>选中 sdx 节点，在文件菜单中卸载配置文件(Unload Hive)</h3><h3 id="最后把-ntuser-data-文件拷贝回宿主机，并覆盖步骤-3-下的文件。"><a href="#最后把-ntuser-data-文件拷贝回宿主机，并覆盖步骤-3-下的文件。" class="headerlink" title="最后把 ntuser.data  文件拷贝回宿主机，并覆盖步骤 3 下的文件。"></a>最后把 ntuser.data  文件拷贝回宿主机，并覆盖步骤 3 下的文件。</h3>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>Windows 终端美化</title>
    <url>/Windows/%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>使用 <span class="exturl" data-url="aHR0cHM6Ly9vaG15cG9zaC5kZXYv">oh-my-posh<i class="fa fa-external-link-alt"></i></span> 配置</p>
</blockquote>
<h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbkRlRG9iYmVsZWVyL29oLW15LXBvc2gvcmVsZWFzZXMvZG93bmxvYWQvdjE5LjE2LjEvaW5zdGFsbC1hbWQ2NC5leGU=">点击下载<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oh-my-posh font install</span><br></pre></td></tr></table></figure>

<h4 id="将终端字体修改为已下载的字体"><a href="#将终端字体修改为已下载的字体" class="headerlink" title="将终端字体修改为已下载的字体"></a>将终端字体修改为已下载的字体</h4><h3 id="查看可选主题"><a href="#查看可选主题" class="headerlink" title="查看可选主题"></a>查看可选主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure>

<h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><h4 id="打开控制台的配置文件"><a href="#打开控制台的配置文件" class="headerlink" title="打开控制台的配置文件"></a>打开控制台的配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code $profile</span><br></pre></td></tr></table></figure>

<h4 id="添加命令"><a href="#添加命令" class="headerlink" title="添加命令"></a>添加命令</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;$env:POSH_THEMES_PATH/quick-term.omp.json&quot;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure>

<p><code>quick-term.omp</code>：所选择的主题</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 主题修改</title>
    <url>/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo/%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>按照官方指定的方法安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><p>修改<code>&lt;folder&gt;/_config.yml</code>文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 修改主题</span><br><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>复制主题的<code>_config.yml</code>文件到站点根目录下，命名为<code>_config.[theme].yml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>

<p>根据需要，修改<code>_config.[theme].yml</code>文件</p>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 博客搭建</title>
    <url>/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Hexo：快速、简洁且高效的博客框架</p>
</blockquote>
<blockquote>
<p>使用 <a href="/Linux/Node.js-%E5%AE%89%E8%A3%85">Node.js</a> 配置！</p>
</blockquote>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>使用 npm 安装 Hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo hexo init &lt;folder&gt;</span><br><span class="line">sudo chown -R user:group &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>博客会打开<code>4000</code>端口，访问<code>localhost:4000</code>即可访问博客</p>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo 本地搜索</title>
    <url>/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo/%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="编辑-config-yml"><a href="#编辑-config-yml" class="headerlink" title="编辑 _config.yml"></a>编辑 _config.yml</h4><p>添加以下内容：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">search</span>:</span><br><span class="line">  path: <span class="built_in">search</span>.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<h4 id="编辑-config-next-yml"><a href="#编辑-config-next-yml" class="headerlink" title="编辑 _config.next.yml"></a>编辑 _config.next.yml</h4><p>启用本地搜索：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># Local <span class="built_in">search</span></span><br><span class="line"># Dependencies: https://github.<span class="keyword">com</span>/<span class="keyword">next</span>-theme/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger <span class="built_in">search</span> by changing <span class="built_in">input</span>.</span><br><span class="line">  # If manual, trigger <span class="built_in">search</span> by pressing enter key <span class="built_in">or</span> <span class="built_in">search</span> button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show <span class="keyword">all</span> results by setting <span class="keyword">to</span> -<span class="number">1</span></span><br><span class="line">  top_n_per_article: <span class="number">1</span></span><br><span class="line">  # Unescape html strings <span class="keyword">to</span> the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the <span class="built_in">search</span> data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 环境配置</title>
    <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/C++/</url>
    <content><![CDATA[<blockquote>
<p>使用 <a href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/MSYS2">MSYS2</a> 配置！</p>
</blockquote>
<h3 id="下载、安装："><a href="#下载、安装：" class="headerlink" title="下载、安装："></a>下载、安装：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain</span><br></pre></td></tr></table></figure>

<blockquote>
<p>C++ 模块位置：<br><code>%MSYS2%\ucrt64\bin\g++.exe</code></p>
<p><code>%MSYS2%\ucrt64\bin\gcc.exe</code></p>
<p><code>%MSYS2%\ucrt64\bin\gdb.exe</code></p>
</blockquote>
<h3 id="添加-PATH-路径："><a href="#添加-PATH-路径：" class="headerlink" title="添加 PATH 路径："></a>添加 PATH 路径：</h3><blockquote>
<p><code>%MSYS2%\ucrt64\bin</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Developer\MSYS2\ucrt64\bin</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
        <category>MSYS2</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Git 环境配置</title>
    <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Git/</url>
    <content><![CDATA[<blockquote>
<p>使用 <a href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/MSYS2">MSYS2</a> 配置！</p>
</blockquote>
<h3 id="下载、安装："><a href="#下载、安装：" class="headerlink" title="下载、安装："></a>下载、安装：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S --needed git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>git 位置：<code>%MSYS2%\usr\bin\git.exe</code></p>
</blockquote>
<h3 id="git-位置："><a href="#git-位置：" class="headerlink" title="git 位置："></a>git 位置：</h3><blockquote>
<p>%MSYS2%\usr\bin</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Developer\MSYS2\usr\bin</span><br></pre></td></tr></table></figure>

<h3 id="git-设置中文："><a href="#git-设置中文：" class="headerlink" title="git 设置中文："></a>git 设置中文：</h3><blockquote>
<p>添加环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name %name%</span><br><span class="line">git config --global user.email %email%</span><br></pre></td></tr></table></figure>

<p><code>%name%</code>：用户名</p>
<p><code>%email%</code>：邮箱地址</p>
]]></content>
      <categories>
        <category>环境配置</category>
        <category>MSYS2</category>
      </categories>
  </entry>
  <entry>
    <title>MSYS2 配置</title>
    <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/MSYS2/</url>
    <content><![CDATA[<h3 id="添加到终端"><a href="#添加到终端" class="headerlink" title="添加到终端"></a>添加到终端</h3><blockquote>
<p>命令行：<code>%MSYS2%\msys2_shell.cmd -full-path -msys2 -defterm -no-start</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Developer\MSYS2\msys2_shell.cmd -full-path -msys2 -defterm -no-start</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动目录：<code>%MSYS2%\home\%username%</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Developer\MSYS2\home\%username%</span><br></pre></td></tr></table></figure>

<blockquote>
<p>图标：<code>%MSYS2%\msys2.ico</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\Developer\MSYS2\msys2.ico</span><br></pre></td></tr></table></figure>

<h3 id="设置中文："><a href="#设置中文：" class="headerlink" title="设置中文："></a>设置中文：</h3><p>在&#x2F;etc&#x2F;profile 文件后面添加：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">export LANG=zh_CN.UTF-<span class="number">8</span></span><br><span class="line">export LC_ALL=zh_CN.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>

<h3 id="更换清华源："><a href="#更换清华源：" class="headerlink" title="更换清华源："></a>更换清华源：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s#https\?://mirror.msys2.org/#https://mirrors.tuna.tsinghua.edu.cn/msys2/#g&quot; /etc/pacman.d/mirrorlist*</span><br></pre></td></tr></table></figure>

<h3 id="更新软件包："><a href="#更新软件包：" class="headerlink" title="更新软件包："></a>更新软件包：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Suy</span><br></pre></td></tr></table></figure>

<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S &lt;package_name&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -R &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="卸载软件包及其依赖"><a href="#卸载软件包及其依赖" class="headerlink" title="卸载软件包及其依赖"></a>卸载软件包及其依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Rs &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="卸载所有不再已安装软件包被使用的软件包"><a href="#卸载所有不再已安装软件包被使用的软件包" class="headerlink" title="卸载所有不再已安装软件包被使用的软件包"></a>卸载所有不再已安装软件包被使用的软件包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Rns $(pacman -Qdtq)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
        <category>MSYS2</category>
      </categories>
  </entry>
  <entry>
    <title>Python 环境配置</title>
    <url>/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Python/</url>
    <content><![CDATA[<h3 id="更换清华源："><a href="#更换清华源：" class="headerlink" title="更换清华源："></a>更换清华源：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h3 id="更换缓存位置："><a href="#更换缓存位置：" class="headerlink" title="更换缓存位置："></a>更换缓存位置：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip config set global.cache-dir &quot;O:\packages\pip&quot;</span><br></pre></td></tr></table></figure>

<h3 id="更新-Python-包："><a href="#更新-Python-包：" class="headerlink" title="更新 Python 包："></a>更新 Python 包：</h3><h4 id="检查更新："><a href="#检查更新：" class="headerlink" title="检查更新："></a>检查更新：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list -o</span><br></pre></td></tr></table></figure>

<h4 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U &lt;包名&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 安装</title>
    <url>/Linux/Docker/%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>使用 <a href="../../../resource/Linux/Docker/%E5%AE%89%E8%A3%85/docker_install.sh">Docker 官方安装脚本</a> 安装</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<p><a href="../../../resource/Linux/Docker/%E5%AE%89%E8%A3%85/docker_load.sh">一键配置脚本</a></p>
</blockquote>
<h4 id="添加用户至-docker-组"><a href="#添加用户至-docker-组" class="headerlink" title="添加用户至 docker 组"></a>添加用户至 docker 组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG $(eval echo ~$&#123;SUDO_USER&#125;) docker</span><br></pre></td></tr></table></figure>

<p>重启终端</p>
<h4 id="配置-docker-设置"><a href="#配置-docker-设置" class="headerlink" title="配置 docker 设置"></a>配置 docker 设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ctzga3he.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;live-restore&quot;: true,</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li><code>registry-mirrors</code>：配置镜像源为阿里云</li>
<li><code>live-restore</code>：开启容器重启后恢复</li>
<li><code>exec-opts</code>：配置<code>cgroup</code>驱动为<code>systemd</code></li>
</ul>
<p>重启 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="停止所有容器"><a href="#停止所有容器" class="headerlink" title="停止所有容器"></a>停止所有容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>这个命令会停止所有容器，包括正在运行的容器和已经停止的容器。</p>
<h4 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>这个命令会删除所有容器，包括正在运行的容器和已经停止的容器。</p>
<h4 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<h4 id="卸载-Docker-引擎"><a href="#卸载-Docker-引擎" class="headerlink" title="卸载  Docker  引擎"></a>卸载  Docker  引擎</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt autoremove docker-buildx-plugin \</span><br><span class="line">    docker-ce \</span><br><span class="line">    docker-ce-cli \</span><br><span class="line">    docker-ce-rootless-extras \</span><br><span class="line">    docker-compose-plugin \</span><br><span class="line">    docker-scan-plugin</span><br></pre></td></tr></table></figure>

<p>这个命令会删除 Docker 引擎及其依赖的软件包和文件。</p>
<h4 id="删除-Docker-数据目录"><a href="#删除-Docker-数据目录" class="headerlink" title="删除 Docker 数据目录"></a>删除 Docker 数据目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /etc/docker</span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h4 id="检查是否有漏掉的-docker-依赖"><a href="#检查是否有漏掉的-docker-依赖" class="headerlink" title="检查是否有漏掉的 docker 依赖"></a>检查是否有漏掉的 docker 依赖</h4><p>在 aptitude 中搜索 docker</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 容器</title>
    <url>/Linux/Docker/%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="创建新容器"><a href="#创建新容器" class="headerlink" title="创建新容器"></a>创建新容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS 说明：</p>
<ul>
<li><p><code>-a stdin</code>：指定标准输入输出内容类型，可选<code>STDIN/STDOUT/STDERR</code>三项；</p>
</li>
<li><p><code>-d</code>：后台运行容器，并返回容器 ID；</p>
</li>
<li><p><code>-i</code>：以交互模式运行容器，通常与 -t 同时使用；</p>
</li>
<li><p><code>-P</code>：随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</p>
</li>
<li><p><code>-p</code>：指定端口映射，格式为：主机(宿主)端口:容器端口</p>
</li>
<li><p><code>-t</code>：为容器重新分配一个伪输入终端，通常与<code>-i</code>同时使用；</p>
</li>
<li><p><code>--name=&quot;nginx-lb&quot;</code>：为容器指定一个名称；</p>
</li>
<li><p><code>--dns 8.8.8.8</code>：指定容器使用的 DNS 服务器，默认和宿主一致；</p>
</li>
<li><p><code>--dns-search example.com</code>：指定容器 DNS 搜索域名，默认和宿主一致；</p>
</li>
<li><p><code>-h &quot;mars&quot;</code>：指定容器的<code>hostname</code>；</p>
</li>
<li><p><code>-e username=&quot;ritchie&quot;</code>：设置环境变量；</p>
</li>
<li><p><code>--env-file=[]</code>：从指定文件读入环境变量；</p>
</li>
<li><p><code>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;</code>：绑定容器到指定 CPU 运行；</p>
</li>
<li><p><code>-m</code> ：设置容器使用内存最大值；</p>
</li>
<li><p><code>--net=&quot;bridge&quot;</code>：指定容器的网络连接类型，支持<code>bridge/host/none/container</code>四种类型；</p>
</li>
<li><p><code>--link=[]</code>：添加链接到另一个容器；</p>
</li>
<li><p><code>--expose=[]</code>：开放一个端口或一组端口；</p>
</li>
<li><p><code>--volume , -v</code>：绑定一个卷</p>
</li>
</ul>
<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps [-a]</span><br></pre></td></tr></table></figure>

<p><code>-a</code>：显示未运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                   NAMES</span><br><span class="line">09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp         myrunoob</span><br><span class="line">96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp  mymysql</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>CONTAINER ID</code>：容器 ID。</p>
</li>
<li><p><code>IMAGE</code>：使用的镜像。</p>
</li>
<li><p><code>COMMAND</code>：启动容器时运行的命令。</p>
</li>
<li><p><code>CREATED</code>：容器的创建时间。</p>
</li>
<li><p><code>STATUS</code>：容器状态。<br>状态有 7 种</p>
</li>
</ul>
<ul>
<li><p>created（已创建）</p>
</li>
<li><p>restarting（重启中）</p>
</li>
<li><p>running（运行中）</p>
</li>
<li><p>removing（迁移中）</p>
</li>
<li><p>paused（暂停）</p>
</li>
<li><p>exited（停止）</p>
</li>
<li><p>dead（死亡）</p>
</li>
</ul>
<h5 id="查看内存占用情况"><a href="#查看内存占用情况" class="headerlink" title="查看内存占用情况"></a>查看内存占用情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stats --no-stream $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<h4 id="控制容器"><a href="#控制容器" class="headerlink" title="控制容器"></a>控制容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker [OPTIONS] &lt;容器&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>start</code>：启动</p>
</li>
<li><p><code>stop</code>：关闭</p>
</li>
<li><p><code>restart</code>：重新启动</p>
</li>
<li><p><code>rm [-f]</code>：(强制) 删除</p>
</li>
<li><p><code>logs</code>：查看日志</p>
</li>
</ul>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><h5 id="启动新的程序，如-bash"><a href="#启动新的程序，如-bash" class="headerlink" title="启动新的程序，如 bash"></a>启动新的程序，如 bash</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;容器&gt; &lt;program&gt;</span><br></pre></td></tr></table></figure>

<p>从此容器退出时，容器不会停止</p>
<h5 id="使用正在运行的程序"><a href="#使用正在运行的程序" class="headerlink" title="使用正在运行的程序"></a>使用正在运行的程序</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach &lt;容器&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Docker 镜像</title>
    <url>/Linux/Docker/%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx                 latest    605c77e624dd   2 years ago   141MB</span><br><span class="line">openjdk               latest    5f94f53bbced   2 years ago   471MB</span><br><span class="line">node                  latest    a283f62cb84b   2 years ago   993MB</span><br><span class="line">mysql                 latest    3218b38490ce   2 years ago   516MB</span><br><span class="line">ubuntu                latest    ba6acccedd29   2 years ago   72.8MB</span><br><span class="line">centos                latest    5d0da3dc9764   2 years ago   231MB</span><br></pre></td></tr></table></figure>

<p>各个选项说明：</p>
<ul>
<li><p><code>REPOSITORY</code>：表示镜像的仓库源</p>
</li>
<li><p><code>TAG</code>：镜像的标签</p>
</li>
<li><p><code>IMAGE ID</code>：镜像 ID</p>
</li>
<li><p><code>CREATED</code>：镜像创建时间</p>
</li>
<li><p><code>SIZE</code>：镜像大小</p>
</li>
</ul>
<h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NAME</span>      DESCRIPTION                                     STARS     OFFICIAL</span><br><span class="line"><span class="attribute">ubuntu</span>    Ubuntu is a Debian-based Linux operating sys…   <span class="number">16831</span>    <span class="meta"> [OK]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>NAME</code>：镜像仓库源的名称</p>
</li>
<li><p><code>DESCRIPTION</code>：镜像的描述</p>
</li>
<li><p><code>OFFICIAL</code>：是否 docker 官方发布</p>
</li>
<li><p><code>stars</code>：类似 Github 里面的 star，表示点赞、喜欢的意思。</p>
</li>
</ul>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<p>docker 会自动拉取镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">7b1a6ab2e44d: Already exists</span><br><span class="line">Digest: sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">docker.io/library/ubuntu:latest</span><br></pre></td></tr></table></figure>

<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi ubuntu</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Untagged: ubuntu:latest</span><br><span class="line">Untagged: ubuntu@sha256:626ffe58f6e7566e00254b638eb7e0f3b11d4da9675088f4781a50ae288f3322</span><br><span class="line">Deleted: sha256:ba6acccedd2923aee4c2acc6a23780b14ed4b8a5fa4e14e252a23b846df9b6c1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>WSL2 镜像网络</title>
    <url>/Linux/WSL2/%E9%95%9C%E5%83%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h3 id="创建-wslconfig-文件"><a href="#创建-wslconfig-文件" class="headerlink" title="创建 .wslconfig 文件"></a>创建 .wslconfig 文件</h3><p>在用户目录下创建<code>.wslconfig</code>文件，如<code>C:\User\cakkl\.wslconfig</code></p>
<p>添加以下内容：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored # 镜像模式</span><br></pre></td></tr></table></figure>

<h3 id="允许入站连接"><a href="#允许入站连接" class="headerlink" title="允许入站连接"></a>允许入站连接</h3><p>使用管理员权限在<code>PowerShell</code>窗口中运行以下命令，以配置<code>Hyper-V</code>防火墙设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-NetFirewallHyperVVMSetting</span> <span class="literal">-Name</span> ‘&#123;<span class="number">40</span>E0AC32<span class="literal">-46A5-438A-A0B2-2B479E8F2E90</span>&#125;’ <span class="literal">-DefaultInboundAction</span> Allow</span><br></pre></td></tr></table></figure>

<h3 id="重启-WSL"><a href="#重启-WSL" class="headerlink" title="重启 WSL"></a>重启 WSL</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置更改的 8 秒规则</p>
<p>必须等到运行你的 Linux 发行版的子系统完全停止运行并重启，配置设置更新才会显示。 这通常需要关闭发行版 shell 的所有实例后大约 8 秒。必须等到运行你的 Linux 发行版的子系统完全停止运行并重启，配置设置更新才会显示。 这通常需要关闭发行版 shell 的所有实例后大约 8 秒。</p>
</blockquote>
<h3 id="其他相关设置"><a href="#其他相关设置" class="headerlink" title="其他相关设置"></a>其他相关设置</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">dnsTunneling=true # DNS 隧道</span><br><span class="line">autoProxy=true # 自动代理</span><br><span class="line"></span><br><span class="line">[experimental]</span><br><span class="line">autoMemoryReclaim=gradual # 可以在 gradual 、dropcache 、disabled 之间选择</span><br><span class="line">sparseVhd=true # 稀疏 VHD</span><br><span class="line">hostAddressLoopback=true # 主机地址回环</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>WSL2</category>
      </categories>
  </entry>
  <entry>
    <title>WSL2 迁移</title>
    <url>/Linux/WSL2/%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<blockquote>
<p>原理：导出再导入</p>
</blockquote>
<h3 id="终止正在运行的-wsl"><a href="#终止正在运行的-wsl" class="headerlink" title="终止正在运行的 wsl"></a>终止正在运行的 wsl</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure>

<h3 id="导出需要迁移的-wsl"><a href="#导出需要迁移的-wsl" class="headerlink" title="导出需要迁移的 wsl"></a>导出需要迁移的 wsl</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--export</span> Ubuntu D:\Developer\WSL\Ubuntu\Ubuntu.tar</span><br></pre></td></tr></table></figure>

<p><code>D:\Developer\WSL\Ubuntu\Ubuntu.tar</code>：导出分发的文件路径</p>
<h3 id="卸载原有的分发"><a href="#卸载原有的分发" class="headerlink" title="卸载原有的分发"></a>卸载原有的分发</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> Ubuntu</span><br></pre></td></tr></table></figure>

<h3 id="将导出的文件再次导入"><a href="#将导出的文件再次导入" class="headerlink" title="将导出的文件再次导入"></a>将导出的文件再次导入</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--import</span> Ubuntu D:\Developer\WSL\Ubuntu D:\Developer\WSL\Ubuntu\Ubuntu.tar</span><br></pre></td></tr></table></figure>

<p><code>D:\Developer\WSL\Ubuntu</code>：wsl2 分发的安装路径</p>
<h3 id="设定默认登陆用户"><a href="#设定默认登陆用户" class="headerlink" title="设定默认登陆用户"></a>设定默认登陆用户</h3><p>进入对应分发，修改 <code>/etc/wsl.conf</code></p>
<p>添加以下内容：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">default = &#123;user&#125;</span><br></pre></td></tr></table></figure>

<p><code>&#123;user&#125;</code>：默认登录用户</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>WSL2</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js 安装</title>
    <url>/Linux/%E5%85%B6%E4%BB%96/Node.js-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>从 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2Fk">Node.js 官网<i class="fa fa-external-link-alt"></i></span> 下载 Linux 二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v20.10.0/node-v20.10.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -xf node-v20.10.0-linux-x64.tar.xz</span><br><span class="line">sudo mv node-v20.10.0-linux-x64 /usr/local/program/node</span><br></pre></td></tr></table></figure>

<h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s ../program/node/bin/node /usr/local/bin/node</span><br><span class="line">sudo ln -s ../program/node/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>

<h3 id="npm-换源"><a href="#npm-换源" class="headerlink" title="npm 换源"></a>npm 换源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g --registry=https://registry.npm.taobao.org nrm</span><br><span class="line">sudo nrm test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试通过后</span></span><br><span class="line">sudo nrm use taobao</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Python 编译安装</title>
    <url>/Linux/%E5%85%B6%E4%BB%96/Python-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在正式开始之前，建议首先检查系统软件是否均为最新，并更新到最新版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 刷新软件包目录</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 如上一步提示有可以更新的项目，则执行更新</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libbz2-dev liblzma-dev sqlite3 libsqlite3-dev tk-dev uuid-dev libgdbm-compat-dev pkg-config -y</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><h4 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h4><p>在  <span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvcmVsZWFzZS9weXRob24tMzEyMi8=">Python3.12 官网下载界面<i class="fa fa-external-link-alt"></i></span>下载 Python 3.12 的源代码</p>
<p>复制 Python3.12 源码包至 <code>/usr/local/src</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> Python-3.12.2.tar.xz /usr/local/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf Python-3.12.2.tar.xz</span><br><span class="line"><span class="built_in">cd</span> Python-3.12.2</span><br></pre></td></tr></table></figure>

<p>创建安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/program/python</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>检查依赖与配置编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --prefix=/usr/local/program/python --enable-optimizations --enable-shared</span><br></pre></td></tr></table></figure>

<p>此处使用了三个可选配置项，含义如下：</p>
<ul>
<li><code>--prefix=/usr/local/program/python</code>：设定 python3.12 的安装目录</li>
<li><code>--enable-optimizations</code>：用<a href="https://docs.python.org/zh-cn/3/using/configure.html#envvar-PROFILE_TASK"><code>PROFILE_TASK</code></a>启用以配置文件主导的优化（PGO）</li>
<li><code>--enable-shared</code>：启用共享 Python 库 <code>libpython</code> 的编译</li>
</ul>
<p>更多可用配置项的信息，请参阅  [Python 官方文档](<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy91c2luZy9jb25maWd1cmUuaHRtbA==">3. 配置 Python — Python 3.12.1 文档<i class="fa fa-external-link-alt"></i></span>)。</p>
<p>经过一系列检查无误之后，会自动生成<code>Makefile</code>，即可进行下一步的编译了。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>完成配置，生成 <code>Makefile</code> 后，就可以开始编译了。<strong>编译耗时较长</strong>，可以使用  <code>-j</code>  选项指定参与编译的 CPU 核心数，假如此机器为 12 核 CPU：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make -j 12</span><br></pre></td></tr></table></figure>

<p>编译结束后，注意仔细查看一下输出，检查可能存在的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一种可能出现的问题：</span></span><br><span class="line">sudo make</span><br><span class="line"><span class="comment"># ......省略部分输出......</span></span><br><span class="line">Python build finished successfully!</span><br><span class="line">The necessary bits to build these optional modules were not found:</span><br><span class="line">_dbm                  _tkinter              _uuid</span><br><span class="line">To find the necessary bits, look <span class="keyword">in</span> setup.py <span class="keyword">in</span> detect_modules() <span class="keyword">for</span> the module<span class="string">&#x27;s name.</span></span><br></pre></td></tr></table></figure>

<p>如果出现类似如上的警告，说明编译时有部分软件包不可用，导致编译出的 Python 有部分可选模块不可用。检查上一节中提到的依赖是否都已安装，或求助于网络搜索引擎，安装对应软件包后再次编译即可。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装二进制文件</span></span><br><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure>

<p>在<code>Makefile</code>中有如下提示：</p>
<blockquote>
<p>If you have a previous version of Python installed that you don’t want to overwrite, you can use “make altinstall” instead of “make install”.</p>
</blockquote>
<p>故应使用  <code>altinstall</code>  而不是  <code>install</code> 。二者的一个重要区别在于，后者会创建符号链接，将  <code>python3</code>  等命令链接到正在安装的新版本 <code>Python3</code> 上，这可能会破坏系统。更多信息请参阅当前目录下的  <code>README.rst</code>  文件。</p>
<h4 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h4><p>添加 Python3.12 动态库路径至 <code>/etc/ld.so.conf.d/python.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">touch</span> /etc/ld.so.conf.d/python.conf</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;/usr/local/program/python/lib&quot;</span> &gt; sudo /etc/ld.so.conf.d/python.conf</span><br></pre></td></tr></table></figure>

<p>更新动态库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldconfig</span><br></pre></td></tr></table></figure>

<h4 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/program/python/bin/python3.12 /usr/local/bin/python</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/program/python/bin/pip3.12 /usr/local/bin/pip</span><br></pre></td></tr></table></figure>

<p>其他配置 - <a href="/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Python">Python 配置</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 初始化</title>
    <url>/Linux/%E5%85%B6%E4%BB%96/Ubuntu-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p><a href="../../resource/Linux/Ubuntu-%E5%88%9D%E5%A7%8B%E5%8C%96/Ubuntu_load.sh">一键配置脚本</a></p>
</blockquote>
<h3 id="更换清华源"><a href="#更换清华源" class="headerlink" title="更换清华源"></a>更换清华源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span></span><br><span class="line"></span><br><span class="line">deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span></span><br><span class="line">EOF</span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>

<h3 id="安装中文语言包"><a href="#安装中文语言包" class="headerlink" title="安装中文语言包"></a>安装中文语言包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install language-pack-zh-hans manpages-zh -y</span><br><span class="line">echo &quot;zh_CN.UTF-8&quot; &gt; /etc/locale-gen</span><br><span class="line">locale-gen</span><br><span class="line">echo &quot;LANG=zh_CN.UTF-8&quot; &gt; /etc/default/locale</span><br></pre></td></tr></table></figure>

<p>重启终端</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; $(eval echo ~$&#123;SUDO_USER&#125;)/.bashrc &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">alias df=&#x27;df -h&#x27;</span><br><span class="line">alias du=&#x27;du -h&#x27;</span><br><span class="line"></span><br><span class="line">alias dc=&#x27;exit&#x27;</span><br><span class="line">EOF</span><br><span class="line">source $(eval echo ~$&#123;SUDO_USER&#125;)/.bashrc</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; $(eval echo ~$&#123;SUDO_USER&#125;)/.profile &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$HOME/scripts&quot; ] ; then</span><br><span class="line">    PATH=&quot;$PATH:$HOME/scripts&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export LESSHISTFILE=-</span><br><span class="line">EOF</span><br><span class="line">source $(eval echo ~$&#123;SUDO_USER&#125;)/.profile</span><br></pre></td></tr></table></figure>

<h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install aptitude nmap net-tools -y</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>systemctl 管理</title>
    <url>/Linux/%E5%85%B6%E4%BB%96/systemctl-%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>systemd 是一个系统和服务管理器，它是 Linux 系统的标准初始化系统。它的设计目标是克服 SysV 和 Upstart 的一些缺点。</p>
</blockquote>
<blockquote>
<p>systemctl 是 systemd 的主命令，用于管理系统和服务。</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">sudo systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">sudo systemctl rescue</span><br></pre></td></tr></table></figure>

<h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示服务状态</span></span><br><span class="line">sudo systemctl status service_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start service_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop service_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart service_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> service_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> service_name</span><br></pre></td></tr></table></figure>

<h4 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h4><p>通过编写服务文件，可以自定义服务。</p>
<p>服务文件通常存放在<code>/etc/systemd/system</code>目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"># 服务描述</span><br><span class="line">Description=My Service</span><br><span class="line"># 服务依赖</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"># 服务类型</span><br><span class="line">Type=simple</span><br><span class="line"># 服务启动用户</span><br><span class="line">User=cakkl</span><br><span class="line"># 服务启动命令</span><br><span class="line">ExecStart=/usr/bin/my_service</span><br><span class="line"># 服务重启策略</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"># 多用户模式启动</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>添加服务文件后，需要重新加载 systemd。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h5 id="服务文件说明"><a href="#服务文件说明" class="headerlink" title="服务文件说明"></a>服务文件说明</h5><ul>
<li><code>[Unit]</code>：服务描述和依赖<ul>
<li><code>Description</code>：服务描述</li>
<li><code>After</code>：服务依赖</li>
</ul>
</li>
<li><code>[Service]</code>：服务类型和启动命令<ul>
<li><code>Type</code>：服务类型<ul>
<li><code>simple</code>：默认值，服务启动后，主进程就是服务进程</li>
<li><code>forking</code>：服务启动后，主进程会 fork 出一个子进程</li>
<li><code>oneshot</code>：服务启动后，主进程会 fork 出一个子进程，子进程退出后，服务退出</li>
<li><code>dbus</code>：服务启动后，主进程会 fork 出一个子进程，子进程会监听 D-Bus 消息</li>
<li><code>notify</code>：服务启动后，主进程会 fork 出一个子进程，子进程会向 systemd 发送通知</li>
<li><code>idle</code>：服务启动后，主进程会 fork 出一个子进程，子进程会等待直到有任务需要处理</li>
</ul>
</li>
<li><code>User</code>：服务启动用户</li>
<li><code>ExecStart</code>：服务启动命令</li>
<li><code>Restart</code>：服务重启策略<ul>
<li><code>no</code>：不重启</li>
<li><code>on-success</code>：只有在服务成功退出时重启</li>
<li><code>on-failure</code>：只有在服务失败退出时重启</li>
<li><code>on-abnormal</code>：只有在服务异常退出时重启</li>
<li><code>on-abort</code>：只有在服务异常退出时重启</li>
<li><code>always</code>：总是重启</li>
</ul>
</li>
<li><code>RestartSec</code>：服务重启间隔</li>
</ul>
</li>
<li><code>[Install]</code>：服务启动模式<ul>
<li><code>WantedBy</code>：服务启动模式</li>
<li><code>Alias</code>：服务别名</li>
<li><code>Also</code>：同时启动的服务</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Python Excel</title>
    <url>/Python/%E5%85%B6%E4%BB%96/Excel/</url>
    <content><![CDATA[<h3 id="安装-Python-库"><a href="#安装-Python-库" class="headerlink" title="安装 Python 库"></a>安装 Python 库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install openpyxl pandas</span><br></pre></td></tr></table></figure>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="创建-Excel"><a href="#创建-Excel" class="headerlink" title="创建 Excel"></a>创建 Excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">    &#123;<span class="string">&quot;ID&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>]&#125;</span><br><span class="line">)  <span class="comment"># 创建一个DataFrame对象</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df = df.set_index(<span class="string">&quot;ID&quot;</span>)  <span class="comment"># 将ID列设置为索引</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_excel(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment"># 将DataFrame对象写入到Excel文件中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Excel 文件已创建成功！&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="读取-Excel"><a href="#读取-Excel" class="headerlink" title="读取 Excel"></a>读取 Excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;test.xlsx&quot;</span>, engine=<span class="string">&quot;openpyxl&quot;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;类型为：<span class="subst">&#123;<span class="built_in">type</span>(df)&#125;</span>&quot;</span>)  <span class="comment"># 打印DataFrame对象的类型</span></span><br><span class="line"><span class="built_in">print</span>(df.shape)  <span class="comment"># 打印DataFrame对象的形状(行数,列数)</span></span><br><span class="line"><span class="built_in">print</span>(df.columns)  <span class="comment"># 打印DataFrame对象的列名</span></span><br><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 打印DataFrame对象的前5行</span></span><br></pre></td></tr></table></figure>

<h4 id="修改-Excel"><a href="#修改-Excel" class="headerlink" title="修改 Excel"></a>修改 Excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.drop(<span class="number">1</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 删除ID为1的行</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_excel(<span class="string">&quot;test.xlsx&quot;</span>, index=<span class="literal">False</span>)  <span class="comment"># 将DataFrame对象写入到Excel文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多行</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.drop([<span class="number">1</span>, <span class="number">2</span>], inplace=<span class="literal">True</span>)  <span class="comment"># 删除ID为1和2的行</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_excel(<span class="string">&quot;test.xlsx&quot;</span>, index=<span class="literal">False</span>)  <span class="comment"># 将DataFrame对象写入到Excel文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多行但无法同时进行时，应该先删除行号大的行</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">df = pd.read_excel(<span class="string">&quot;test.xlsx&quot;</span>)  <span class="comment"># 读取Excel文件</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(data):  <span class="comment"># reversed()函数将列表倒序</span></span><br><span class="line">    df.drop(i, inplace=<span class="literal">True</span>)  <span class="comment"># 删除ID为1，3，5，7，9的行</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 文件操作</title>
    <url>/Python/%E5%85%B6%E4%BB%96/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>借助于 <code>os</code> 模块可以在 Python 中进行文件操作</p>
<h3 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filenames = os.listdir(<span class="string">r&quot;O:\vscode\Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(filenames)</span><br></pre></td></tr></table></figure>

<p>这会返回一个列表，其中包含指定目录中的所有文件和目录的名称</p>
<h3 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">r&quot;O:\vscode\Python&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(root)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">dir</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br></pre></td></tr></table></figure>

<p>这会返回一个列表，其中包含指定目录中的所有文件和目录的路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">r&quot;O:\vscode\Python&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, file))</span><br><span class="line">        <span class="comment"># os.path.join(root, file) 会自动处理路径分隔符</span></span><br><span class="line">        <span class="comment"># 会获取子目录下的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">r&quot;O:\vscode\Python&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="comment"># 检查文件后缀名</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&quot;.py&quot;</span></span><br><span class="line">            <span class="keyword">or</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&quot;.pyw&quot;</span></span><br><span class="line">        ):  <span class="comment"># os.path.splitext(file) 会将文件名分割为文件名和后缀名 例如: (&quot;test&quot;, &quot;.py&quot;)</span></span><br><span class="line">            <span class="built_in">print</span>(os.path.join(root, file))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 网络请求</title>
    <url>/Python/%E5%85%B6%E4%BB%96/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="安装-Python-库"><a href="#安装-Python-库" class="headerlink" title="安装 Python 库"></a>安装 Python 库</h3><p>python 网络请求需要两个库<code>requests</code>获取网站信息，<code>bs4</code>解析信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests bs4</span><br></pre></td></tr></table></figure>

<h3 id="python-代码"><a href="#python-代码" class="headerlink" title="python 代码"></a>python 代码</h3><h4 id="访问网页"><a href="#访问网页" class="headerlink" title="访问网页"></a>访问网页</h4><p>网络请求需要 4 个参数</p>
<p><code>URL</code>：访问的网址</p>
<p><code>headers</code>：浏览器的标识（可选）</p>
<p><code>cookies</code>：登录信息（可选）</p>
<p><code>post</code>：网络请求（可选）</p>
<blockquote>
<p><code>headers</code>，<code>cookies</code>和<code>post</code>可在 <strong>右键-检查-网络</strong> 中查看</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">URL = <span class="string">&quot;&quot;</span></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line">cookies = &#123;&#125;</span><br><span class="line">post = &#123;&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    URL, cookies=cookies, headers=headers, data=post</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>response</code>：自定义变量 接受<strong>返回的网站信息</strong></p>
<p><code>response.status_code</code>：状态码，200 为成功</p>
<p><code>response.ok</code>：<code>bool</code>变量，访问成功为<code>True</code></p>
<p><code>response.txt</code>：网站内容</p>
<h4 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h4><p>根据需要获取网站的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = response.text <span class="comment"># 返回网页内容</span></span><br><span class="line">soup = bs4.BeautifulSoup(content, <span class="string">&quot;html.parser&quot;</span>) <span class="comment"># 解析网页内容</span></span><br><span class="line">all_products = soup.find_all(class_=<span class="string">&quot;product_pod&quot;</span>) <span class="comment"># 找到所有class为product_pod的标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> product <span class="keyword">in</span> track(all_products, description=<span class="string">&quot;正在爬取...&quot;</span>):</span><br><span class="line">    name = product.h3.a[<span class="string">&quot;title&quot;</span>] <span class="comment"># 获取名字</span></span><br><span class="line">    price = product.find(class_=<span class="string">&quot;price_color&quot;</span>).text[<span class="number">2</span>:] <span class="comment"># 获取价格</span></span><br></pre></td></tr></table></figure>

<h3 id="完整代码-改良"><a href="#完整代码-改良" class="headerlink" title="完整代码 + 改良"></a>完整代码 + 改良</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> Progress</span><br><span class="line"><span class="keyword">from</span> rich.panel <span class="keyword">import</span> Panel</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, remove</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FrameProgress</span>(<span class="title class_ inherited__">Progress</span>): <span class="comment"># 创建边框进度条</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_renderables</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">yield</span> Panel(self.make_tasks_table(self.tasks), expand=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_price</span>(<span class="params">i, q</span>): <span class="comment"># 爬取价格</span></span><br><span class="line">response = get(<span class="string">f&quot;https://books.toscrape.com/catalogue/page-<span class="subst">&#123;i&#125;</span>.html&quot;</span>)</span><br><span class="line">price_file = <span class="string">f&quot;<span class="subst">&#123;path.join(path.dirname(argv[<span class="number">0</span>]), <span class="string">f&#x27;price<span class="subst">&#123;i&#125;</span>.txt&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.ok:</span><br><span class="line">        content = response.text</span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        all_products = soup.find_all(class_=<span class="string">&quot;product_pod&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(</span><br><span class="line">            price_file,</span><br><span class="line">            <span class="string">&quot;w&quot;</span>,</span><br><span class="line">            encoding=<span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">        ) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> product <span class="keyword">in</span> all_products:</span><br><span class="line">                name = product.h3.a[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">                price = product.find(class_=<span class="string">&quot;price_color&quot;</span>).text[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">                f.write(<span class="string">f&quot;书名：<span class="subst">&#123;name&#125;</span>\t价格：<span class="subst">&#123;price&#125;</span>\n&quot;</span>)</span><br><span class="line">        status = <span class="string">&quot;成功！&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        status = <span class="string">&quot;失败！！！&quot;</span></span><br><span class="line">    log = &#123;<span class="string">&quot;status&quot;</span>: status, <span class="string">&quot;page&quot;</span>: i&#125;</span><br><span class="line">    q.put(log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_price</span>(): <span class="comment"># 合并价格</span></span><br><span class="line">all_price_file = <span class="string">f&quot;<span class="subst">&#123;path.join(path.dirname(argv[<span class="number">0</span>]), <span class="string">&#x27;all_price.txt&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(</span><br><span class="line">all_price_file,</span><br><span class="line"><span class="string">&quot;w&quot;</span>,</span><br><span class="line">encoding=<span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">) <span class="keyword">as</span> all_price:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">price_file = <span class="string">f&quot;<span class="subst">&#123;path.join(path.dirname(argv[<span class="number">0</span>]), <span class="string">f&#x27;price<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.txt&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> path.exists(price_file):</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(</span><br><span class="line">price_file,</span><br><span class="line">encoding=<span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">) <span class="keyword">as</span> price:</span><br><span class="line">all_price.write(price.read())</span><br><span class="line">remove(price_file)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;爬取完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> **name** == <span class="string">&quot;**main**&quot;</span>:</span><br><span class="line">q = Queue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">Thread(name=<span class="string">f&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>页&quot;</span>, target=get_price, args=(i + <span class="number">1</span>, q)).start() <span class="comment"># 创建线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> FrameProgress() <span class="keyword">as</span> progress:  <span class="comment"># 创建进度条</span></span><br><span class="line">        task = progress.add_task(<span class="string">&quot;爬取进度：&quot;</span>, total=<span class="number">10</span>)  <span class="comment"># 添加任务</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 监听队列</span></span><br><span class="line">            item = q.get()</span><br><span class="line">            progress.console.<span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;item[<span class="string">&#x27;page&#x27;</span>]&#125;</span>页爬取<span class="subst">&#123;item[<span class="string">&#x27;status&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            progress.update(task, advance=<span class="number">1</span>)</span><br><span class="line">            q.task_done()</span><br><span class="line">    all_price()  <span class="comment"># 合并价格</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 进度条</title>
    <url>/Python/%E5%85%B6%E4%BB%96/%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    <content><![CDATA[<h3 id="安装-Python-库"><a href="#安装-Python-库" class="headerlink" title="安装 Python 库"></a>安装 Python 库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install rich</span><br></pre></td></tr></table></figure>

<h3 id="代码实现示例"><a href="#代码实现示例" class="headerlink" title="代码实现示例"></a>代码实现示例</h3><h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> track</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> track(<span class="built_in">range</span>(<span class="number">100</span>), description=<span class="string">&quot;正在载入...&quot;</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="下载进度条"><a href="#下载进度条" class="headerlink" title="下载进度条"></a>下载进度条</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> track</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://8.130.43.27/软件更新/图书管理系统.zip&quot;</span>  <span class="comment"># 下载地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 URL对应的 / 网站 是否有效 如 http://8.130.43.27 有效</span></span><br><span class="line">response = requests.get(URL.split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + URL.split(<span class="string">&quot;/&quot;</span>)[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;URL 无效&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dir_name 为 当前目录下 保存为 URL 截取的文件名</span></span><br><span class="line">dir_name = path.join(path.dirname(__file__), URL.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>])  <span class="comment"># 保存路径</span></span><br><span class="line">response = requests.get(URL, stream=<span class="literal">True</span>)</span><br><span class="line">total_size_in_bytes = <span class="built_in">int</span>(response.headers.get(<span class="string">&quot;content-length&quot;</span>, <span class="number">0</span>))</span><br><span class="line">block_size = <span class="number">1024</span></span><br><span class="line">total = total_size_in_bytes // block_size</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;dir_name&#125;</span>&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> track(</span><br><span class="line">        response.iter_content(chunk_size=block_size),</span><br><span class="line">        total=total,</span><br><span class="line">        description=<span class="string">&quot;正在下载...&quot;</span>,</span><br><span class="line">    ):</span><br><span class="line">        f.write(chunk)</span><br></pre></td></tr></table></figure>

<h4 id="多进度条"><a href="#多进度条" class="headerlink" title="多进度条"></a>多进度条</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> Progress</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Progress() <span class="keyword">as</span> progress:</span><br><span class="line">    task1 = progress.add_task(<span class="string">&quot;[red]Downloading...&quot;</span>, total=<span class="number">100</span>)</span><br><span class="line">    task2 = progress.add_task(<span class="string">&quot;[green]Processing...&quot;</span>, total=<span class="number">100</span>)</span><br><span class="line">    task3 = progress.add_task(<span class="string">&quot;[cyan]Cooking...&quot;</span>, total=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> progress.finished:</span><br><span class="line">        progress.update(task1, advance=<span class="number">0.5</span>)</span><br><span class="line">        progress.update(task2, advance=<span class="number">0.3</span>)</span><br><span class="line">        progress.update(task3, advance=<span class="number">0.9</span>)</span><br><span class="line">        time.sleep(<span class="number">0.02</span>)</span><br></pre></td></tr></table></figure>

<h4 id="自定义进度条"><a href="#自定义进度条" class="headerlink" title="自定义进度条"></a>自定义进度条</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> rich.panel <span class="keyword">import</span> Panel</span><br><span class="line"><span class="keyword">from</span> rich.progress <span class="keyword">import</span> Progress</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FrameProgress</span>(<span class="title class_ inherited__">Progress</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_renderables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">yield</span> Panel(</span><br><span class="line">            self.make_tasks_table(self.tasks), expand=<span class="literal">False</span></span><br><span class="line">        )  <span class="comment"># expand=False 使得进度条不会占满整个屏幕</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> FrameProgress() <span class="keyword">as</span> progress:</span><br><span class="line">    task1 = progress.add_task(<span class="string">&quot;[red]Master Progress Bar...&quot;</span>, total=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        task2 = progress.add_task(<span class="string">f&quot;[green]Sub Progress Bar: <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>...&quot;</span>, total=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            progress.update(task2, advance=<span class="number">1</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        progress.update(task1, completed=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 通知</title>
    <url>/Python/%E5%85%B6%E4%BB%96/%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h3 id="桌面通知"><a href="#桌面通知" class="headerlink" title="桌面通知"></a>桌面通知</h3><h4 id="安装-Python-库"><a href="#安装-Python-库" class="headerlink" title="安装 Python 库"></a>安装 Python 库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install windows_toasts</span><br></pre></td></tr></table></figure>

<h4 id="代码实现示例"><a href="#代码实现示例" class="headerlink" title="代码实现示例"></a>代码实现示例</h4><h5 id="桌面通知-1"><a href="#桌面通知-1" class="headerlink" title="桌面通知"></a>桌面通知</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> windows_toasts <span class="keyword">import</span> WindowsToaster, Toast</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">toaster = WindowsToaster(<span class="string">&quot;Python&quot;</span>)  <span class="comment"># 创建一个名为Python的Toast通知</span></span><br><span class="line">newToast = Toast()  <span class="comment"># 创建一个新的Toast通知</span></span><br><span class="line">newToast.text_fields = [<span class="string">&quot;Hello, world!&quot;</span>]  <span class="comment"># 设置Toast通知的文本字段</span></span><br><span class="line">newToast.on_activated = <span class="keyword">lambda</span> _: <span class="built_in">print</span>(<span class="string">&quot;Toast clicked!&quot;</span>)  <span class="comment"># 设置Toast通知的激活事件</span></span><br><span class="line">toaster.show_toast(newToast)  <span class="comment"># 显示Toast通知</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)  <span class="comment"># 等待5秒，以便查看Toast通知</span></span><br></pre></td></tr></table></figure>

<h5 id="无进度-Toast-通知"><a href="#无进度-Toast-通知" class="headerlink" title="无进度 Toast 通知"></a>无进度 Toast 通知</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> windows_toasts <span class="keyword">import</span> InteractableWindowsToaster, Toast, ToastProgressBar</span><br><span class="line"></span><br><span class="line">toaster = InteractableWindowsToaster(</span><br><span class="line">    <span class="string">&quot;Windows-Toasts&quot;</span></span><br><span class="line">)  <span class="comment"># 创建一个名为Windows-Toasts的Toast通知</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个ToastProgressBar对象，用于显示进度条</span></span><br><span class="line">progressBar = ToastProgressBar(</span><br><span class="line">    <span class="string">&quot;正在准备...&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Python 4 release&quot;</span>,</span><br><span class="line">    progress=<span class="literal">None</span>,</span><br><span class="line">    progress_override=<span class="string">&quot;? millenniums remaining&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">newToast = Toast(text_fields=[<span class="string">&quot;123&quot;</span>], progress_bar=progressBar)</span><br><span class="line"></span><br><span class="line">toaster.show_toast(newToast)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> windows_toasts <span class="keyword">import</span> InteractableWindowsToaster, Toast, ToastProgressBar</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">notices</span>(<span class="params">q</span>):</span><br><span class="line">    toaster = InteractableWindowsToaster(</span><br><span class="line">        <span class="string">&quot;Py 打包工具&quot;</span></span><br><span class="line">    )  <span class="comment"># 创建一个名为Py 打包工具的Toast通知</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个ToastProgressBar对象，用于显示进度条</span></span><br><span class="line">    progressBar = ToastProgressBar(</span><br><span class="line">        <span class="string">&quot;正在打包...&quot;</span>,</span><br><span class="line">        progress=<span class="literal">None</span>,</span><br><span class="line">        progress_override=<span class="string">&quot;剩余 4 步骤&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    newToast = Toast(text_fields=[<span class="string">&quot;&quot;</span>], progress_bar=progressBar)</span><br><span class="line">    newToast.text_fields = [<span class="string">&quot;123&quot;</span>]</span><br><span class="line"></span><br><span class="line">    toaster.show_toast(newToast)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = q.get()</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        progressBar.progress_override = <span class="string">f&quot;剩余 <span class="subst">&#123;<span class="number">6</span>-item&#125;</span> 步骤&quot;</span></span><br><span class="line">        toaster.update_toast(newToast)</span><br><span class="line">        q.task_done()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    toaster.clear_toasts()  <span class="comment"># 清除所有Toast通知</span></span><br><span class="line"></span><br><span class="line">    newToast = Toast(text_fields=[<span class="string">&quot;打包成功！&quot;</span>])</span><br><span class="line">    toaster.show_toast(newToast)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">msg</span>():</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        q.put(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;put&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line">thread = Thread(target=notices, args=(q,))</span><br><span class="line">thread.start()</span><br><span class="line">msg()</span><br><span class="line">q.join()</span><br><span class="line">q.put(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure>

<h5 id="进度条-Toast-通知"><a href="#进度条-Toast-通知" class="headerlink" title="进度条 Toast 通知"></a>进度条 Toast 通知</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> windows_toasts <span class="keyword">import</span> InteractableWindowsToaster, Toast, ToastProgressBar</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">toaster = InteractableWindowsToaster(<span class="string">&quot;进度条&quot;</span>)</span><br><span class="line"></span><br><span class="line">progressBar = ToastProgressBar(</span><br><span class="line">    status=<span class="string">&quot;正在下载...&quot;</span>,</span><br><span class="line">    caption=<span class="string">&quot;Python 4 release&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">newToast = Toast(text_fields=[<span class="string">&quot;正在准备程序&quot;</span>], progress_bar=progressBar)</span><br><span class="line"></span><br><span class="line">toaster.show_toast(newToast)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    progressBar.progress = i / <span class="number">100</span></span><br><span class="line">    progressBar.progress_override = <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>%&quot;</span></span><br><span class="line">    toaster.update_toast(newToast)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">progressBar.status = <span class="string">&quot;正在解压...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line"></span><br><span class="line">    progressBar.progress = i / <span class="number">100</span></span><br><span class="line">    progressBar.progress_override = <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>%&quot;</span></span><br><span class="line">    toaster.update_toast(newToast)</span><br><span class="line">    sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">progressBar.status = <span class="string">&quot;完成&quot;</span></span><br><span class="line">progressBar.progress = <span class="number">1</span></span><br><span class="line">progressBar.progress_override = <span class="string">&quot;100%&quot;</span></span><br><span class="line">toaster.update_toast(newToast)</span><br></pre></td></tr></table></figure>

<h3 id="通知推送"><a href="#通知推送" class="headerlink" title="通知推送"></a>通知推送</h3><p>使用 Bark 部署推送</p>
<h4 id="代码实现示例-1"><a href="#代码实现示例-1" class="headerlink" title="代码实现示例"></a>代码实现示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 Bark 推送通知</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> post</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://&lt;server&gt;/&lt;key&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;body&quot;</span>: <span class="string">&quot;内容：\n123&quot;</span>, <span class="string">&quot;group&quot;</span>: <span class="string">&quot;测试&quot;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">post(URL, json=data, headers=headers)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Tkinter 关闭行为</title>
    <url>/Python/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2-Tkinter/%E5%85%B3%E9%97%AD%E8%A1%8C%E4%B8%BA/</url>
    <content><![CDATA[<p>Tkinter 窗口的关闭行为可以通过 <code>protocol</code> 方法设置</p>
<img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/关闭行为/关闭行为.png" alt="关闭行为">

<h3 id="代码实现示例"><a href="#代码实现示例" class="headerlink" title="代码实现示例"></a>代码实现示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> messagebox</span><br><span class="line"><span class="keyword">import</span> ctypes  <span class="comment"># 导入模块</span></span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">ctypes.windll.shcore.SetProcessDpiAwareness(<span class="number">1</span>)</span><br><span class="line">ScaleFactor = ctypes.windll.shcore.GetScaleFactorForDevice(<span class="number">0</span>)</span><br><span class="line">root.tk.call(<span class="string">&quot;tk&quot;</span>, <span class="string">&quot;scaling&quot;</span>, ScaleFactor / <span class="number">75</span>)</span><br><span class="line">screen_width = root.winfo_screenwidth()</span><br><span class="line">screen_height = root.winfo_screenheight()</span><br><span class="line"></span><br><span class="line">window_width = <span class="number">650</span></span><br><span class="line">window_height = <span class="number">190</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>((screen_width - window_width) / <span class="number">2</span>)</span><br><span class="line">y = <span class="built_in">int</span>((screen_height - window_height) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">root.geometry(<span class="string">f&quot;<span class="subst">&#123;window_width&#125;</span>x<span class="subst">&#123;window_height&#125;</span>+<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">root.resizable(<span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_closing</span>():  <span class="comment"># 关闭窗口时触发</span></span><br><span class="line">    <span class="keyword">if</span> messagebox.askokcancel(<span class="string">&quot;退出程序&quot;</span>, <span class="string">&quot;你确定要退出吗？&quot;</span>):</span><br><span class="line">        root.destroy()</span><br><span class="line"></span><br><span class="line">root.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, on_closing)  <span class="comment"># 关闭窗口时触发</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tkinter</category>
      </categories>
  </entry>
  <entry>
    <title>Tkinter 提示信息</title>
    <url>/Python/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2-Tkinter/%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>使用 <code>messagebox</code> 模块可以在图形界面中显示提示信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br></pre></td></tr></table></figure>

<p>messagebox 需要先创建一个窗口对象，然后调用相应的方法</p>
<h3 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">messagebox.showinfo(<span class="string">&quot;showinfo&quot;</span>, <span class="string">&quot;这是一个提示信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.showwarning(<span class="string">&quot;showwarning&quot;</span>, <span class="string">&quot;这是一个警告信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.showerror(<span class="string">&quot;showerror&quot;</span>, <span class="string">&quot;这是一个错误信息&quot;</span>)</span><br></pre></td></tr></table></figure>

<table>
    <tr>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/showinfo.png" alt="showinfo"></td>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/showwarning.png" alt="showwarning"></td>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/showerror.png" alt="showerror"></td>
    </tr>
</table>

<h3 id="询问信息"><a href="#询问信息" class="headerlink" title="询问信息"></a>询问信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">messagebox.askquestion(<span class="string">&quot;askquestion&quot;</span>, <span class="string">&quot;用于询问信息，返回yes或no&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.askyesno(<span class="string">&quot;askyesno&quot;</span>, <span class="string">&quot;用于询问信息，返回True或False&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.askokcancel(<span class="string">&quot;askokcancel&quot;</span>, <span class="string">&quot;用于询问信息，返回True或False&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.askretrycancel(<span class="string">&quot;askretrycancel&quot;</span>, <span class="string">&quot;用于询问信息，返回True或False&quot;</span>)</span><br><span class="line"></span><br><span class="line">messagebox.askyesnocancel(<span class="string">&quot;askyesnocancel&quot;</span>, <span class="string">&quot;用于询问信息，返回True, False或None&quot;</span>)</span><br></pre></td></tr></table></figure>

<table>
    <tr>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/askquestion.png" alt="askquestion"></td>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/askyesno.png" alt="askyesno"></td>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/askokcancel.png" alt="askokcancel"></td>
    </tr>
    <tr>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/askretrycancel.png" alt="askretrycancel"></td>
        <td style="border: none;"><img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/提示信息/askyesnocancel.png" alt="askyesnocancel"></td>
    </tr>
    <tr>
</table>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tkinter</category>
      </categories>
  </entry>
  <entry>
    <title>Tkinter 文件操作</title>
    <url>/Python/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2-Tkinter/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>使用 <code>filedialog</code> 模块可以在图形界面中进行文件操作</p>
<img class="cakkl-img" data-src="../../../images/Python/图形界面-Tkinter/文件操作/文件选择.png" alt="文件选择">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br></pre></td></tr></table></figure>

<p>filedialog 需要先创建一个窗口对象，然后调用相应的方法、</p>
<p>参数说明：</p>
<ul>
<li>title：窗口标题</li>
<li>filetypes：文件类型（元组中的每个元素是一个文件类型，每个文件类型是一个元组，第一个元素是文件类型的描述，第二个元素是文件类型的扩展名，多个文件类型之间用分号隔开）</li>
<li>initialdir：初始目录</li>
</ul>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><h5 id="返回文件对象"><a href="#返回文件对象" class="headerlink" title="返回文件对象"></a>返回文件对象</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件，返回一个文件对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择文件！&quot;</span>, flush=<span class="literal">True</span>)  <span class="comment"># flush=True表示立即输出，不缓存</span></span><br><span class="line">file = filedialog.askopenfile(</span><br><span class="line">    title=<span class="string">&quot;请选择文件&quot;</span>,</span><br><span class="line">    filetypes=((<span class="string">&quot;Python文件&quot;</span>, <span class="string">&quot;*.py;&quot;</span> <span class="string">&quot;*.pyw&quot;</span>), (<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)),</span><br><span class="line">    initialdir=<span class="string">r&quot;O:\vscode\Python&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;file&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(file)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择多个文件，返回一个文件对象列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择多个文件！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">files = filedialog.askopenfiles(</span><br><span class="line">    title=<span class="string">&quot;请选择多个文件&quot;</span>,</span><br><span class="line">    filetypes=((<span class="string">&quot;Python文件&quot;</span>, <span class="string">&quot;*.py;&quot;</span> <span class="string">&quot;*.pyw&quot;</span>), (<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)),</span><br><span class="line">    initialdir=<span class="string">r&quot;O:\vscode\Python&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;files&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(files)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="返回文件路径"><a href="#返回文件路径" class="headerlink" title="返回文件路径"></a>返回文件路径</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择文件，返回文件的路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择文件！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">file = filedialog.askopenfilename(</span><br><span class="line">    title=<span class="string">&quot;请选择文件&quot;</span>,</span><br><span class="line">    filetypes=((<span class="string">&quot;Python文件&quot;</span>, <span class="string">&quot;*.py;&quot;</span> <span class="string">&quot;*.pyw&quot;</span>), (<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)),</span><br><span class="line">    initialdir=<span class="string">r&quot;O:\vscode\Python&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;file&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(file)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择多个文件，返回文件的路径列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择多个文件！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">files = filedialog.askopenfilenames(</span><br><span class="line">    title=<span class="string">&quot;请选择多个文件&quot;</span>,</span><br><span class="line">    filetypes=((<span class="string">&quot;Python文件&quot;</span>, <span class="string">&quot;*.py;&quot;</span> <span class="string">&quot;*.pyw&quot;</span>), (<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)),</span><br><span class="line">    initialdir=<span class="string">r&quot;O:\vscode\Python&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;files&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(files)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h4><h5 id="返回文件对象-1"><a href="#返回文件对象-1" class="headerlink" title="返回文件对象"></a>返回文件对象</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择保存位置，创建文件并返回一个文件对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择保存位置！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">filename = filedialog.asksaveasfile(</span><br><span class="line">    defaultextension=<span class="string">&quot;.txt&quot;</span>, filetypes=[(<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;filename&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(filename)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="返回文件路径-1"><a href="#返回文件路径-1" class="headerlink" title="返回文件路径"></a>返回文件路径</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择保存位置，创建文件并返回文件的路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择保存位置！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">filename = filedialog.asksaveasfilename(</span><br><span class="line">    defaultextension=<span class="string">&quot;.txt&quot;</span>, filetypes=[(<span class="string">&quot;文本文件&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;所有文件&quot;</span>, <span class="string">&quot;*.*&quot;</span>)]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;filename&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(filename)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="选择文件夹"><a href="#选择文件夹" class="headerlink" title="选择文件夹"></a>选择文件夹</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择文件夹，返回文件夹路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请选择文件夹！&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">folder = filedialog.askdirectory(title=<span class="string">&quot;请选择文件夹&quot;</span>, initialdir=<span class="string">r&quot;D:\cakkl\OneDrive\桌面&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;变量：<span class="subst">&#123;folder&#125;</span>，类型：<span class="subst">&#123;<span class="built_in">type</span>(folder)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tkinter</category>
      </categories>
  </entry>
  <entry>
    <title>Python 元组</title>
    <url>/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<p>元组-不可以修改的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="元组的定义："><a href="#元组的定义：" class="headerlink" title="元组的定义："></a>元组的定义：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br><span class="line">a = (<span class="string">&quot;hello&quot;</span>,) <span class="comment"># 元组为单个元素时要加逗号</span></span><br><span class="line">a = ()       <span class="comment"># 空元组</span></span><br><span class="line">a = <span class="built_in">tuple</span>()  <span class="comment"># 空元组</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不可以修改元组的内容，但可以修改元组内的列表的内容</p>
</blockquote>
<p>其他参考 - <a href="/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E5%88%97%E8%A1%A8">Python 列表</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据容器</category>
      </categories>
  </entry>
  <entry>
    <title>Python 列表</title>
    <url>/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="列表的定义："><a href="#列表的定义：" class="headerlink" title="列表的定义："></a>列表的定义：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]</span><br><span class="line">a = []      <span class="comment"># 空列表</span></span><br><span class="line">a = <span class="built_in">list</span>()  <span class="comment"># 空列表</span></span><br></pre></td></tr></table></figure>

<h3 id="查找下标："><a href="#查找下标：" class="headerlink" title="查找下标："></a>查找下标：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = mylist.index(<span class="string">&quot;d&quot;</span>) <span class="comment"># 查找元素d的下标</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d的下标是：<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist.insert(<span class="number">2</span>, <span class="string">&quot;f&quot;</span>) <span class="comment"># 在下标为2的位置插入元素f</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br><span class="line">mylist.append(<span class="string">&quot;g&quot;</span>) <span class="comment"># 在列表末尾添加元素g</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure>

<h4 id="列表合并："><a href="#列表合并：" class="headerlink" title="列表合并："></a>列表合并：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist2 = [<span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>]</span><br><span class="line">mylist.extend(mylist2) <span class="comment"># 将列表mylist2的元素添加到mylist中</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure>

<h3 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> mylist[<span class="number">2</span>] <span class="comment"># 删除下标为2的元素</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"></span><br><span class="line">element = mylist.pop(<span class="number">0</span>) <span class="comment"># 删除列表首位的元素</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;被删除的元素是：<span class="subst">&#123;element&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">mylist.remove(<span class="string">&quot;i&quot;</span>) <span class="comment"># 删除元素i</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure>

<h4 id="清空列表："><a href="#清空列表：" class="headerlink" title="清空列表："></a>清空列表：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist.clear() <span class="comment"># 清空列表</span></span><br><span class="line"><span class="built_in">print</span>(mylist)</span><br></pre></td></tr></table></figure>

<h3 id="统计："><a href="#统计：" class="headerlink" title="统计："></a>统计：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(mylist.count(<span class="string">&quot;a&quot;</span>)) <span class="comment"># 统计元素a在列表中出现的次数</span></span><br><span class="line"></span><br><span class="line">count = <span class="built_in">len</span>(mylist) <span class="comment"># 统计列表中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表中元素的个数是：<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="遍历列表："><a href="#遍历列表：" class="headerlink" title="遍历列表："></a>遍历列表：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> mylist: <span class="comment"># 遍历列表</span></span><br><span class="line">    <span class="built_in">print</span>(element, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">del</span> element</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据容器</category>
      </categories>
  </entry>
  <entry>
    <title>Python 字典</title>
    <url>/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>,<span class="string">&quot;d&quot;</span>:<span class="number">4</span>,<span class="string">&quot;e&quot;</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过键(key)，记录值(value)</p>
</blockquote>
<h3 id="字典的定义："><a href="#字典的定义：" class="headerlink" title="字典的定义："></a>字典的定义：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>,<span class="string">&quot;d&quot;</span>:<span class="number">4</span>,<span class="string">&quot;e&quot;</span>:<span class="number">5</span>&#125;</span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>

<h3 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = my_dict[<span class="string">&quot;a&quot;</span>] <span class="comment"># 通过键获取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;键a对应的值为：<span class="subst">&#123;score&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="字典的嵌套："><a href="#字典的嵌套：" class="headerlink" title="字典的嵌套："></a>字典的嵌套：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study = &#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">97</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">98</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">99</span>&#125;,</span><br><span class="line">    <span class="string">&quot;李四&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">95</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">96</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">97</span>&#125;&#125;</span><br><span class="line">score = study[<span class="string">&quot;张三&quot;</span>][<span class="string">&quot;语文&quot;</span>] <span class="comment"># 通过键获取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;张三的语文成绩为：<span class="subst">&#123;score&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study[<span class="string">&quot;王五&quot;</span>] = &#123;<span class="string">&quot;语文&quot;</span>:<span class="number">93</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">94</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">95</span>&#125; <span class="comment"># 添加元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;添加王五后的study为：<span class="subst">&#123;study&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="修改元素："><a href="#修改元素：" class="headerlink" title="修改元素："></a>修改元素：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study[<span class="string">&quot;张三&quot;</span>][<span class="string">&quot;语文&quot;</span>] = <span class="number">100</span> <span class="comment"># 修改元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;修改张三的语文成绩后的study为：<span class="subst">&#123;study&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = study.pop(<span class="string">&quot;王五&quot;</span>) <span class="comment"># 删除元素,返回被删除的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;删除王五后的study为：<span class="subst">&#123;study&#125;</span>，被删除的王五的元素为：<span class="subst">&#123;score&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="清空字典："><a href="#清空字典：" class="headerlink" title="清空字典："></a>清空字典：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study.clear() <span class="comment"># 清空字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;清空后的study为：<span class="subst">&#123;study&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="统计："><a href="#统计：" class="headerlink" title="统计："></a>统计：</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">key2 = study[<span class="string">&quot;张三&quot;</span>].keys() <span class="comment"># 获取字典中张三的所有键</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;张三的学科为：<span class="subst">&#123;key2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> key2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>的成绩为：<span class="subst">&#123;study[<span class="string">&#x27;张三&#x27;</span>][key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="遍历字典："><a href="#遍历字典：" class="headerlink" title="遍历字典："></a>遍历字典：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keys = study.keys() <span class="comment"># 获取字典中所有的键</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;study中所有的键为：<span class="subst">&#123;keys&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>的语文成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;语文&#x27;</span>]&#125;</span>，数学成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;数学&#x27;</span>]&#125;</span>，英语成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;英语&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> study: <span class="comment"># 遍历字典的第二种方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>的语文成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;语文&#x27;</span>]&#125;</span>，数学成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;数学&#x27;</span>]&#125;</span>，英语成绩为：<span class="subst">&#123;study[key][<span class="string">&#x27;英语&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据容器</category>
      </categories>
  </entry>
  <entry>
    <title>Python 数据容器的通用操作</title>
    <url>/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8%E7%9A%84%E9%80%9A%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># len 获取容器中元素的个数</span></span><br><span class="line"><span class="built_in">len</span>(容器)</span><br><span class="line"><span class="comment"># max 获取容器中元素的最大值</span></span><br><span class="line"><span class="built_in">max</span>(容器)</span><br><span class="line"><span class="comment"># min 获取容器中元素的最小值</span></span><br><span class="line"><span class="built_in">min</span>(容器)</span><br><span class="line"><span class="comment"># list 将其他数据容器转换为列表</span></span><br><span class="line"><span class="built_in">list</span>(容器)</span><br><span class="line"><span class="comment"># tuple 将其他数据容器转换为元组</span></span><br><span class="line"><span class="built_in">tuple</span>(容器)</span><br><span class="line"><span class="comment"># set 将其他数据容器转换为集合</span></span><br><span class="line"><span class="built_in">set</span>(容器)</span><br><span class="line"><span class="comment"># dict 将其他数据容器转换为字典</span></span><br><span class="line"><span class="built_in">dict</span>(容器)</span><br><span class="line"><span class="comment"># sorted 对容器中的元素进行排序</span></span><br><span class="line"><span class="built_in">sorted</span>(容器, reverse=<span class="literal">False</span>) <span class="comment"># reverse默认为False，表示升序，为True时表示降序</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据容器</category>
      </categories>
  </entry>
  <entry>
    <title>Python 集合</title>
    <url>/Python/%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>集合中的元素不可以重复</p>
<p>集合中的元素是无序的</p>
<blockquote>
<p>集合中的元素可以修改，但是不能通过下标访问与修改</p>
</blockquote>
<h3 id="集合的定义："><a href="#集合的定义：" class="headerlink" title="集合的定义："></a>集合的定义：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line">a = <span class="built_in">set</span>() <span class="comment"># 创建空集合</span></span><br></pre></td></tr></table></figure>

<h3 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.add(<span class="string">&quot;f&quot;</span>) <span class="comment"># 添加元素f</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1添加f后的内容为：<span class="subst">&#123;s1&#125;</span>，其类型为：<span class="subst">&#123;<span class="built_in">type</span>(s1)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.remove(<span class="string">&quot;a&quot;</span>) <span class="comment"># 删除元素a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1删除a后的内容为：<span class="subst">&#123;s1&#125;</span>，其类型为：<span class="subst">&#123;<span class="built_in">type</span>(s1)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = s1.pop() <span class="comment"># 随机取出集合中的某一个元素，并删除该元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;被删除的元素是：<span class="subst">&#123;element&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1删除元素后的内容为：<span class="subst">&#123;s1&#125;</span>，其类型为：<span class="subst">&#123;<span class="built_in">type</span>(s1)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="清空集合："><a href="#清空集合：" class="headerlink" title="清空集合："></a>清空集合：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.clear() <span class="comment"># 清空集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1清空后的内容为：<span class="subst">&#123;s1&#125;</span>，其类型为：<span class="subst">&#123;<span class="built_in">type</span>(s1)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="集合运算："><a href="#集合运算：" class="headerlink" title="集合运算："></a>集合运算：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="差集："><a href="#差集：" class="headerlink" title="差集："></a>差集：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = s1.difference(s2) <span class="comment"># 求差集，s1中有，s2中没有的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1与s2的差集为：<span class="subst">&#123;s3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">s1.difference_update(s2) <span class="comment"># 删除s1中与s2中相同的元素，保留s1中独有的元素，结果s1被修改，s2不变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1与s2的差集为：<span class="subst">&#123;s1&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="并集："><a href="#并集：" class="headerlink" title="并集："></a>并集：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = s1.union(s2) <span class="comment"># 求并集，s1与s2中所有的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s1与s2的并集为：<span class="subst">&#123;s3&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="统计："><a href="#统计：" class="headerlink" title="统计："></a>统计：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">len</span>(s3) <span class="comment"># 求集合中元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;s3中元素的个数为：<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="遍历集合："><a href="#遍历集合：" class="headerlink" title="遍历集合："></a>遍历集合：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> s3: <span class="comment"># 遍历集合</span></span><br><span class="line">    <span class="built_in">print</span>(element, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">del</span> element</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>数据容器</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 树</title>
    <url>/C++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/</url>
    <content><![CDATA[<p>树是一种非线性的数据结构，它是由 n（n&gt;&#x3D;1）个有限节点组成一个具有层次关系的集合。</p>
<p>结点：树的每个元素称为结点。<br>根节点：树的顶端结点称为根节点。<br>父节点：若一个结点含有子节点，则这个结点称为其子节点的父节点。<br>叶节点：没有子节点的结点称为叶节点。<br>节点的度：一个结点含有的子树的个数称为该结点的度。<br>树的度：一棵树中，最大的节点度称为树的度。<br>树的深度(高度)：树中结点的最大层次称为树的深度或高度。</p>
<h3 id="双亲定义法"><a href="#双亲定义法" class="headerlink" title="双亲定义法"></a>双亲定义法</h3><p>定义一个结构体，其中包括数据域和指针域，指针域指向双亲结点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>; <span class="comment">// 数据域</span></span><br><span class="line">    <span class="type">int</span> parent = <span class="number">-1</span>; <span class="comment">// 双亲结点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="树的创建"><a href="#树的创建" class="headerlink" title="树的创建"></a>树的创建</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> max_size = <span class="number">100</span>; <span class="comment">// 树的最大结点数</span></span><br><span class="line"></span><br><span class="line">node tree[max_size]; <span class="comment">// 树的结点数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_tree</span><span class="params">()</span> <span class="comment">// 创建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 结点数</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tree[i].data &gt;&gt; tree[i].parent; <span class="comment">// 输入结点数据和双亲结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的插入"><a href="#树的插入" class="headerlink" title="树的插入"></a>树的插入</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_tree</span><span class="params">(<span class="type">int</span> data, <span class="type">int</span> parent)</span> <span class="comment">// 插入结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].data == <span class="number">0</span>) <span class="comment">// 找到空结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            tree[i].data = data; <span class="comment">// 插入结点</span></span><br><span class="line">            tree[i].parent = parent; <span class="comment">// 设置双亲结点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;树满&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的删除"><a href="#树的删除" class="headerlink" title="树的删除"></a>树的删除</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_tree</span><span class="params">(<span class="type">int</span> data)</span> <span class="comment">// 删除结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].data == data) <span class="comment">// 找到结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            tree[i].data = <span class="number">0</span>; <span class="comment">// 删除结点</span></span><br><span class="line">            tree[i].parent = <span class="number">-1</span>; <span class="comment">// 删除双亲结点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到结点&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的查找"><a href="#树的查找" class="headerlink" title="树的查找"></a>树的查找</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_tree</span><span class="params">(<span class="type">int</span> data)</span> <span class="comment">// 查找结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; max_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].data == data) <span class="comment">// 找到结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> i)</span> <span class="comment">// 先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[i].data != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tree[i].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">1</span>)); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        <span class="built_in">pre_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">2</span>)); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> i)</span> <span class="comment">// 中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[i].data != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">in_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">1</span>)); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        cout &lt;&lt; tree[i].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">in_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">2</span>)); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> i)</span> <span class="comment">// 后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[i].data != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">post_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">1</span>)); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        <span class="built_in">post_order</span>(<span class="built_in">find_tree</span>(tree[i].data * <span class="number">2</span> + <span class="number">2</span>)); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">        cout &lt;&lt; tree[i].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h3><p>定义一个结构体，其中包括数据域和指针域，指针域分别指向第一个孩子结点和下一个兄弟结点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>; <span class="comment">// 数据域</span></span><br><span class="line">    node *first_child = <span class="literal">NULL</span>; <span class="comment">// 第一个孩子结点</span></span><br><span class="line">    node *next_sibling = <span class="literal">NULL</span>; <span class="comment">// 下一个兄弟结点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="树的创建-1"><a href="#树的创建-1" class="headerlink" title="树的创建"></a>树的创建</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">node *<span class="title">create_tree</span><span class="params">()</span> <span class="comment">// 创建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    cin &gt;&gt; data;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node *new_node = <span class="keyword">new</span> node; <span class="comment">// 创建新结点</span></span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;first_child = <span class="built_in">create_tree</span>(); <span class="comment">// 递归创建孩子结点</span></span><br><span class="line">    new_node-&gt;next_sibling = <span class="built_in">create_tree</span>(); <span class="comment">// 递归创建兄弟结点</span></span><br><span class="line">    <span class="keyword">return</span> new_node; <span class="comment">// 返回根结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的插入-1"><a href="#树的插入-1" class="headerlink" title="树的插入"></a>树的插入</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_tree</span><span class="params">(node *root, <span class="type">int</span> data, <span class="type">int</span> parent)</span> <span class="comment">// 插入结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;data == parent)</span><br><span class="line">    &#123;</span><br><span class="line">        node *new_node = <span class="keyword">new</span> node;</span><br><span class="line">        new_node-&gt;data = data;</span><br><span class="line">        new_node-&gt;next_sibling = root-&gt;first_child; <span class="comment">// 插入结点</span></span><br><span class="line">        root-&gt;first_child = new_node; <span class="comment">// 设置孩子结点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">insert_tree</span>(root-&gt;first_child, data, parent); <span class="comment">// 递归插入孩子结点</span></span><br><span class="line">    <span class="built_in">insert_tree</span>(root-&gt;next_sibling, data, parent); <span class="comment">// 递归插入兄弟结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的删除-1"><a href="#树的删除-1" class="headerlink" title="树的删除"></a>树的删除</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_tree</span><span class="params">(node *root, <span class="type">int</span> data)</span> <span class="comment">// 删除结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;first_child != <span class="literal">NULL</span> &amp;&amp; root-&gt;first_child-&gt;data == data)</span><br><span class="line">    &#123;</span><br><span class="line">        node *temp = root-&gt;first_child; <span class="comment">// 删除结点</span></span><br><span class="line">        root-&gt;first_child = root-&gt;first_child-&gt;next_sibling; <span class="comment">// 设置孩子结点</span></span><br><span class="line">        <span class="keyword">delete</span> temp; <span class="comment">// 释放内存</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">delete_tree</span>(root-&gt;first_child, data); <span class="comment">// 递归删除孩子结点</span></span><br><span class="line">    <span class="built_in">delete_tree</span>(root-&gt;next_sibling, data); <span class="comment">// 递归删除兄弟结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的查找-1"><a href="#树的查找-1" class="headerlink" title="树的查找"></a>树的查找</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">node *<span class="title">find_tree</span><span class="params">(node *root, <span class="type">int</span> data)</span> <span class="comment">// 查找结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;data == data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    node *p = <span class="built_in">find_tree</span>(root-&gt;first_child, data); <span class="comment">// 递归查找孩子结点</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find_tree</span>(root-&gt;next_sibling, data); <span class="comment">// 递归查找兄弟结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的遍历-1"><a href="#树的遍历-1" class="headerlink" title="树的遍历"></a>树的遍历</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(node *root)</span> <span class="comment">// 先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">pre_order</span>(root-&gt;first_child);</span><br><span class="line">    <span class="built_in">pre_order</span>(root-&gt;next_sibling);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(node *root)</span> <span class="comment">// 中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">in_order</span>(root-&gt;first_child);</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">in_order</span>(root-&gt;next_sibling);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(node *root)</span> <span class="comment">// 后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">post_order</span>(root-&gt;first_child);</span><br><span class="line">    <span class="built_in">post_order</span>(root-&gt;next_sibling);</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
        <category>树</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 栈</title>
    <url>/C++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E6%A0%88/</url>
    <content><![CDATA[<p>栈是一种先进后出的数据结构，只能在栈顶进行插入和删除操作。</p>
<h3 id="栈的创建"><a href="#栈的创建" class="headerlink" title="栈的创建"></a>栈的创建</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> max_size = <span class="number">100</span>; <span class="comment">// 栈的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈的数据域</span></span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;       <span class="comment">// 栈顶指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(stack &amp;s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == max_size - <span class="number">1</span>) <span class="comment">// 栈满</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[++s.top] = x; <span class="comment">// 栈顶指针先加 1，再入栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(stack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.top--; <span class="comment">// 栈顶指针减 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取栈顶元素"><a href="#取栈顶元素" class="headerlink" title="取栈顶元素"></a>取栈顶元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">(stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.data[s.top]; <span class="comment">// 返回栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除栈顶元素"><a href="#删除栈顶元素" class="headerlink" title="删除栈顶元素"></a>删除栈顶元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_top</span><span class="params">(stack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[s.top--] = <span class="number">0</span>; <span class="comment">// 栈顶指针减 1，再删除栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是这里需要注意的是，删除或取出数组中的元素并不会随之消失，只是指针在变动，下次插入数据时就会覆盖之前的内容。</p>
</blockquote>
<h3 id="查找栈中元素"><a href="#查找栈中元素" class="headerlink" title="查找栈中元素"></a>查找栈中元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(stack s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">// 返回元素下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除栈中元素"><a href="#删除栈中元素" class="headerlink" title="删除栈中元素"></a>删除栈中元素</h3><p>需要将所有元素出栈，用一个临时栈存储不需要删除的元素，再将临时栈中的元素依次入栈。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_element</span><span class="params">(stack &amp;s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack temp; <span class="comment">// 临时栈</span></span><br><span class="line">    <span class="keyword">while</span> (s.top != <span class="number">-1</span>) <span class="comment">// 将所有元素出栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[s.top] != x) <span class="comment">// 不需要删除的元素入栈</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">push</span>(temp, s.data[s.top]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pop</span>(s); <span class="comment">// 删除栈顶元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp.top != <span class="number">-1</span>) <span class="comment">// 将临时栈中的元素依次入栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">push</span>(s, temp.data[temp.top]);</span><br><span class="line">        <span class="built_in">pop</span>(temp); <span class="comment">// 删除栈顶元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历栈"><a href="#遍历栈" class="headerlink" title="遍历栈"></a>遍历栈</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> max_size = <span class="number">100</span>; <span class="comment">// 栈的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈的数据域</span></span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>;       <span class="comment">// 栈顶指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(stack &amp;s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == max_size - <span class="number">1</span>) <span class="comment">// 栈满</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[++s.top] = x; <span class="comment">// 栈顶指针先加 1，再入栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(stack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.top--; <span class="comment">// 栈顶指针减 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">(stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.data[s.top]; <span class="comment">// 返回栈顶元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_top</span><span class="params">(stack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="comment">// 栈空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[s.top--] = <span class="number">0</span>; <span class="comment">// 栈顶指针减 1，再删除栈顶元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(stack s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">// 返回元素下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_element</span><span class="params">(stack &amp;s, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack temp; <span class="comment">// 临时栈</span></span><br><span class="line">    <span class="keyword">while</span> (s.top != <span class="number">-1</span>) <span class="comment">// 将所有元素出栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[s.top] != x) <span class="comment">// 不需要删除的元素入栈</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">push</span>(temp, s.data[s.top]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pop</span>(s); <span class="comment">// 删除栈顶元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp.top != <span class="number">-1</span>) <span class="comment">// 将临时栈中的元素依次入栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">push</span>(s, temp.data[temp.top]);</span><br><span class="line">        <span class="built_in">pop</span>(temp); <span class="comment">// 删除栈顶元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack s;</span><br><span class="line">    <span class="built_in">push</span>(s, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">push</span>(s, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">push</span>(s, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">push</span>(s, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">push</span>(s, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">print</span>(s); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">    <span class="built_in">pop</span>(s);</span><br><span class="line">    <span class="built_in">print</span>(s); <span class="comment">// 1 2 3 4</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">top</span>(s) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">delete_top</span>(s);</span><br><span class="line">    <span class="built_in">print</span>(s); <span class="comment">// 1 2 3</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">find</span>(s, <span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">delete_element</span>(s, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(s); <span class="comment">// 1 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
        <category>线性表</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 链表</title>
    <url>/C++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="链表的创建"><a href="#链表的创建" class="headerlink" title="链表的创建"></a>链表的创建</h3><p>定义一个结构体，其中包括指针域和数据域<br>指针域指向下一个结点，数据域存放数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line">    node *next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后创建一个头指针，指向链表的第一个结点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">node *head = <span class="keyword">new</span> node;</span><br></pre></td></tr></table></figure>

<h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><p>新建一个节点，将新节点的 next 指向头节点，再将头节点指向新节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_head</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;next = head-&gt;next; <span class="comment">// 将新节点的 next 指向头节点</span></span><br><span class="line">    head-&gt;next = new_node;       <span class="comment">// 再将头节点指向新节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><p>新建一个节点，将新节点的 next 指向 NULL，再将尾节点的 next 指向新节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_tail</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 将新节点的 next 指向 NULL</span></span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) <span class="comment">// 找到尾节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = new_node; <span class="comment">// 将尾节点的 next 指向新节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>需要两个指针，一个指向要删除的节点，一个指向要删除节点的前一个节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = head-&gt;next; <span class="comment">// 指向第一个节点</span></span><br><span class="line">    node *pre = head;     <span class="comment">// 指向头节点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)    <span class="comment">// 遍历链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == data) <span class="comment">// 找到要删除的节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;next = p-&gt;next; <span class="comment">// 将前一个节点的 next 指向要删除节点的 next</span></span><br><span class="line">            <span class="keyword">delete</span> p;           <span class="comment">// 删除节点</span></span><br><span class="line">            <span class="keyword">break</span>;             <span class="comment">// 结束循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre = p; <span class="comment">// 前一个节点指向当前节点</span></span><br><span class="line">        p = p-&gt;next; <span class="comment">// 当前节点指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line">    node *next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_head</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_tail</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *new_node = <span class="keyword">new</span> node;</span><br><span class="line">    new_node-&gt;data = data;</span><br><span class="line">    new_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(node *head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = head-&gt;next;</span><br><span class="line">    node *pre = head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == data)</span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(node *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="built_in">insert_head</span>(head, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">insert_head</span>(head, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">insert_head</span>(head, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">insert_tail</span>(head, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">insert_tail</span>(head, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">insert_tail</span>(head, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">print</span>(head);</span><br><span class="line">    <span class="built_in">delete_node</span>(head, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">delete_node</span>(head, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">print</span>(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
        <category>线性表</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 队列</title>
    <url>/C++/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>队列是一种先进先出的数据结构，只能在队尾进行插入操作，在队头进行删除操作。</p>
<h3 id="队列的创建"><a href="#队列的创建" class="headerlink" title="队列的创建"></a>队列的创建</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> max_size = <span class="number">100</span>; <span class="comment">// 队列的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">queue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 队列的数据域</span></span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>;       <span class="comment">// 队头指针</span></span><br><span class="line">    <span class="type">int</span> rear = <span class="number">0</span>;        <span class="comment">// 队尾指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(queue &amp;q, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q.rear + <span class="number">1</span>) % max_size == q.front) <span class="comment">// 队满</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.data[q.rear] = x; <span class="comment">// 先入队</span></span><br><span class="line">    q.rear = (q.rear + <span class="number">1</span>) % max_size; <span class="comment">// 队尾指针加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % max_size; <span class="comment">// 队头指针加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取队头元素"><a href="#取队头元素" class="headerlink" title="取队头元素"></a>取队头元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.data[q.front]; <span class="comment">// 返回队头元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除队头元素"><a href="#删除队头元素" class="headerlink" title="删除队头元素"></a>删除队头元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_front</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.data[q.front] = <span class="number">0</span>; <span class="comment">// 删除队头元素</span></span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % max_size; <span class="comment">// 队头指针加 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印队列"><a href="#打印队列" class="headerlink" title="打印队列"></a>打印队列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = q.front;</span><br><span class="line">    <span class="keyword">while</span> (i != q.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; q.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        i = (i + <span class="number">1</span>) % max_size;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找队列中元素"><a href="#查找队列中元素" class="headerlink" title="查找队列中元素"></a>查找队列中元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(queue q, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = q.front; i != q.rear; i = (i + <span class="number">1</span>) % max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.data[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> max_size = <span class="number">100</span>; <span class="comment">// 队列的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">queue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 队列的数据域</span></span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>;       <span class="comment">// 队头指针</span></span><br><span class="line">    <span class="type">int</span> rear = <span class="number">0</span>;        <span class="comment">// 队尾指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(queue &amp;q, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q.rear + <span class="number">1</span>) % max_size == q.front) <span class="comment">// 队满</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.data[q.rear] = x; <span class="comment">// 先入队</span></span><br><span class="line">    q.rear = (q.rear + <span class="number">1</span>) % max_size; <span class="comment">// 队尾指针加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % max_size; <span class="comment">// 队头指针加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.data[q.front]; <span class="comment">// 返回队头元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_front</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == q.rear) <span class="comment">// 队空</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.data[q.front] = <span class="number">0</span>; <span class="comment">// 删除队头元素</span></span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % max_size; <span class="comment">// 队头指针加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = q.front;</span><br><span class="line">    <span class="keyword">while</span> (i != q.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; q.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        i = (i + <span class="number">1</span>) % max_size;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(queue q, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = q.front; i != q.rear; i = (i + <span class="number">1</span>) % max_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.data[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue q;</span><br><span class="line">    <span class="built_in">push</span>(q, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">push</span>(q, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">push</span>(q, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">print</span>(q);</span><br><span class="line">    <span class="built_in">pop</span>(q);</span><br><span class="line">    <span class="built_in">print</span>(q);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">front</span>(q) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">delete_front</span>(q);</span><br><span class="line">    <span class="built_in">print</span>(q);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">find</span>(q, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
        <category>数据结构</category>
        <category>线性表</category>
      </categories>
  </entry>
</search>
